//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MouldCalculator.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MouldEntities : DbContext
    {
        public MouldEntities()
            : base("name=MouldEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Component> Components { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<OffDay> OffDays { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OffDay_Supplier_Mapping> OffDay_Supplier_Mapping { get; set; }
    
        public virtual int spm_m_DeleteSupplier(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spm_m_DeleteSupplier", supplierIDParameter);
        }
    
        public virtual int spm_m_InsertSupplier(Nullable<int> supplierID, string supplierName, string description)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spm_m_InsertSupplier", supplierIDParameter, supplierNameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<spm_SelectSupplier_Result> spm_SelectSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spm_SelectSupplier_Result>("spm_SelectSupplier");
        }
    }
}
